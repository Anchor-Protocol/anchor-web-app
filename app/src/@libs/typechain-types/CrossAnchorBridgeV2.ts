/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace CrossAnchorBridgeV2 {
  export type IncomingTokenTransferInfoStruct = {
    chainId: BigNumberish;
    tokenRecipientAddress: BytesLike;
    tokenTransferSequence: BigNumberish;
    instructionSequence: BigNumberish;
  };

  export type IncomingTokenTransferInfoStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber,
  ] & {
    chainId: number;
    tokenRecipientAddress: string;
    tokenTransferSequence: BigNumber;
    instructionSequence: BigNumber;
  };
}

export interface CrossAnchorBridgeV2Interface extends utils.Interface {
  contractName: 'CrossAnchorBridgeV2';
  functions: {
    'borrowStable(uint256)': FunctionFragment;
    'completedTokenTransfers(bytes32)': FunctionFragment;
    'depositStable(address,uint256)': FunctionFragment;
    'initialize(uint8,address,address,address[],address,bytes32)': FunctionFragment;
    'lockCollateral(address,uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'parseIncomingTokenTransferInfo(bytes)': FunctionFragment;
    'processTokenTransferInstruction(bytes,bytes)': FunctionFragment;
    'redeemStable(address,uint256)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'repayStable(address,uint256)': FunctionFragment;
    'setVerifier(string)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unlockCollateral(bytes32,uint128)': FunctionFragment;
    'upgradeTo(address)': FunctionFragment;
    'upgradeToAndCall(address,bytes)': FunctionFragment;
    'verify()': FunctionFragment;
    'whitelistedAnchorStableTokens(address)': FunctionFragment;
    'whitelistedCollateralTokens(address)': FunctionFragment;
    'whitelistedStableTokens(address)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'borrowStable',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'completedTokenTransfers',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositStable',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [BigNumberish, string, string, string[], string, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'lockCollateral',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'parseIncomingTokenTransferInfo',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'processTokenTransferInstruction',
    values: [BytesLike, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'redeemStable',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'repayStable',
    values: [string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'setVerifier', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'unlockCollateral',
    values: [BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'upgradeTo', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'upgradeToAndCall',
    values: [string, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'verify', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'whitelistedAnchorStableTokens',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'whitelistedCollateralTokens',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'whitelistedStableTokens',
    values: [string],
  ): string;

  decodeFunctionResult(
    functionFragment: 'borrowStable',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'completedTokenTransfers',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'depositStable',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'lockCollateral',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'parseIncomingTokenTransferInfo',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'processTokenTransferInstruction',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'redeemStable',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'repayStable',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setVerifier',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'unlockCollateral',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'upgradeToAndCall',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'verify', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'whitelistedAnchorStableTokens',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'whitelistedCollateralTokens',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'whitelistedStableTokens',
    data: BytesLike,
  ): Result;

  events: {
    'AdminChanged(address,address)': EventFragment;
    'BeaconUpgraded(address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Upgraded(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface CrossAnchorBridgeV2 extends BaseContract {
  contractName: 'CrossAnchorBridgeV2';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrossAnchorBridgeV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    borrowStable(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    completedTokenTransfers(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    depositStable(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    initialize(
      _consistencyLevel: BigNumberish,
      _wust: string,
      _aust: string,
      _collateralTokens: string[],
      _wormholeTokenBridge: string,
      _terraAnchorBridgeAddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    lockCollateral(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    parseIncomingTokenTransferInfo(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [CrossAnchorBridgeV2.IncomingTokenTransferInfoStructOutput] & {
        incomingTokenTransferInfo: CrossAnchorBridgeV2.IncomingTokenTransferInfoStructOutput;
      }
    >;

    processTokenTransferInstruction(
      encodedIncomingTokenTransferInfo: BytesLike,
      encodedTokenTransfer: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    redeemStable(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    repayStable(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setVerifier(
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unlockCollateral(
      collateralTokenTerraAddress: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    verify(overrides?: CallOverrides): Promise<[string]>;

    whitelistedAnchorStableTokens(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    whitelistedCollateralTokens(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    whitelistedStableTokens(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;
  };

  borrowStable(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  completedTokenTransfers(
    arg0: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  depositStable(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  initialize(
    _consistencyLevel: BigNumberish,
    _wust: string,
    _aust: string,
    _collateralTokens: string[],
    _wormholeTokenBridge: string,
    _terraAnchorBridgeAddress: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  lockCollateral(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  parseIncomingTokenTransferInfo(
    encoded: BytesLike,
    overrides?: CallOverrides,
  ): Promise<CrossAnchorBridgeV2.IncomingTokenTransferInfoStructOutput>;

  processTokenTransferInstruction(
    encodedIncomingTokenTransferInfo: BytesLike,
    encodedTokenTransfer: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  redeemStable(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  repayStable(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setVerifier(
    _verifier: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unlockCollateral(
    collateralTokenTerraAddress: BytesLike,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  verify(overrides?: CallOverrides): Promise<string>;

  whitelistedAnchorStableTokens(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  whitelistedCollateralTokens(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  whitelistedStableTokens(
    arg0: string,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  callStatic: {
    borrowStable(
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    completedTokenTransfers(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    depositStable(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    initialize(
      _consistencyLevel: BigNumberish,
      _wust: string,
      _aust: string,
      _collateralTokens: string[],
      _wormholeTokenBridge: string,
      _terraAnchorBridgeAddress: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    lockCollateral(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    parseIncomingTokenTransferInfo(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<CrossAnchorBridgeV2.IncomingTokenTransferInfoStructOutput>;

    processTokenTransferInstruction(
      encodedIncomingTokenTransferInfo: BytesLike,
      encodedTokenTransfer: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    redeemStable(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repayStable(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setVerifier(_verifier: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    unlockCollateral(
      collateralTokenTerraAddress: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    verify(overrides?: CallOverrides): Promise<string>;

    whitelistedAnchorStableTokens(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    whitelistedCollateralTokens(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    whitelistedStableTokens(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<boolean>;
  };

  filters: {
    'AdminChanged(address,address)'(
      previousAdmin?: null,
      newAdmin?: null,
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null,
    ): AdminChangedEventFilter;

    'BeaconUpgraded(address)'(
      beacon?: string | null,
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'Upgraded(address)'(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    borrowStable(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    completedTokenTransfers(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    depositStable(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    initialize(
      _consistencyLevel: BigNumberish,
      _wust: string,
      _aust: string,
      _collateralTokens: string[],
      _wormholeTokenBridge: string,
      _terraAnchorBridgeAddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    lockCollateral(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    parseIncomingTokenTransferInfo(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    processTokenTransferInstruction(
      encodedIncomingTokenTransferInfo: BytesLike,
      encodedTokenTransfer: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    redeemStable(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    repayStable(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setVerifier(
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unlockCollateral(
      collateralTokenTerraAddress: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    verify(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistedAnchorStableTokens(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    whitelistedCollateralTokens(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    whitelistedStableTokens(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowStable(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    completedTokenTransfers(
      arg0: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    depositStable(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    initialize(
      _consistencyLevel: BigNumberish,
      _wust: string,
      _aust: string,
      _collateralTokens: string[],
      _wormholeTokenBridge: string,
      _terraAnchorBridgeAddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    lockCollateral(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parseIncomingTokenTransferInfo(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    processTokenTransferInstruction(
      encodedIncomingTokenTransferInfo: BytesLike,
      encodedTokenTransfer: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    redeemStable(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    repayStable(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setVerifier(
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unlockCollateral(
      collateralTokenTerraAddress: BytesLike,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    verify(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistedAnchorStableTokens(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    whitelistedCollateralTokens(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    whitelistedStableTokens(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
