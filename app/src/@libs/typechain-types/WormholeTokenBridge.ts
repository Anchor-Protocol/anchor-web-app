/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace WormholeTokenBridge {
  export type TransferStruct = {
    payloadID: BigNumberish;
    amount: BigNumberish;
    tokenAddress: BytesLike;
    tokenChain: BigNumberish;
    to: BytesLike;
    toChain: BigNumberish;
    fee: BigNumberish;
  };

  export type TransferStructOutput = [
    number,
    BigNumber,
    string,
    number,
    string,
    number,
    BigNumber,
  ] & {
    payloadID: number;
    amount: BigNumber;
    tokenAddress: string;
    tokenChain: number;
    to: string;
    toChain: number;
    fee: BigNumber;
  };
}

export interface WormholeTokenBridgeInterface extends utils.Interface {
  contractName: 'WormholeTokenBridge';
  functions: {
    'completeTransfer(bytes)': FunctionFragment;
    'isTransferCompleted(bytes32)': FunctionFragment;
    'parseTransfer(bytes)': FunctionFragment;
    'transferTokens(address,uint256,uint16,bytes32,uint256,uint32)': FunctionFragment;
    'wormhole()': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'completeTransfer',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'isTransferCompleted',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'parseTransfer',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferTokens',
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(functionFragment: 'wormhole', values?: undefined): string;

  decodeFunctionResult(
    functionFragment: 'completeTransfer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isTransferCompleted',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'parseTransfer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferTokens',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'wormhole', data: BytesLike): Result;

  events: {};
}

export interface WormholeTokenBridge extends BaseContract {
  contractName: 'WormholeTokenBridge';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WormholeTokenBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    completeTransfer(
      encodedVm: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isTransferCompleted(
      hash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    parseTransfer(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [WormholeTokenBridge.TransferStructOutput] & {
        transfer: WormholeTokenBridge.TransferStructOutput;
      }
    >;

    transferTokens(
      token: string,
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      arbiterFee: BigNumberish,
      nonce: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    wormhole(overrides?: CallOverrides): Promise<[string]>;
  };

  completeTransfer(
    encodedVm: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isTransferCompleted(
    hash: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  parseTransfer(
    encoded: BytesLike,
    overrides?: CallOverrides,
  ): Promise<WormholeTokenBridge.TransferStructOutput>;

  transferTokens(
    token: string,
    amount: BigNumberish,
    recipientChain: BigNumberish,
    recipient: BytesLike,
    arbiterFee: BigNumberish,
    nonce: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  wormhole(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    completeTransfer(
      encodedVm: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    isTransferCompleted(
      hash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    parseTransfer(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<WormholeTokenBridge.TransferStructOutput>;

    transferTokens(
      token: string,
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      arbiterFee: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    wormhole(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    completeTransfer(
      encodedVm: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isTransferCompleted(
      hash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    parseTransfer(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferTokens(
      token: string,
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      arbiterFee: BigNumberish,
      nonce: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    wormhole(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    completeTransfer(
      encodedVm: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isTransferCompleted(
      hash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    parseTransfer(
      encoded: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transferTokens(
      token: string,
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      arbiterFee: BigNumberish,
      nonce: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    wormhole(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
