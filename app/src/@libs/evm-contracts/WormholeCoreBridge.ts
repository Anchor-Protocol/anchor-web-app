/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export declare namespace WormholeCoreBridge {
  export type SignatureStruct = {
    r: BytesLike;
    s: BytesLike;
    v: BigNumberish;
    guardianIndex: BigNumberish;
  };

  export type SignatureStructOutput = [string, string, number, number] & {
    r: string;
    s: string;
    v: number;
    guardianIndex: number;
  };

  export type VMStruct = {
    version: BigNumberish;
    timestamp: BigNumberish;
    nonce: BigNumberish;
    emitterChainId: BigNumberish;
    emitterAddress: BytesLike;
    sequence: BigNumberish;
    consistencyLevel: BigNumberish;
    payload: BytesLike;
    guardianSetIndex: BigNumberish;
    signatures: WormholeCoreBridge.SignatureStruct[];
    hash: BytesLike;
  };

  export type VMStructOutput = [
    number,
    number,
    number,
    number,
    string,
    BigNumber,
    number,
    string,
    number,
    WormholeCoreBridge.SignatureStructOutput[],
    string,
  ] & {
    version: number;
    timestamp: number;
    nonce: number;
    emitterChainId: number;
    emitterAddress: string;
    sequence: BigNumber;
    consistencyLevel: number;
    payload: string;
    guardianSetIndex: number;
    signatures: WormholeCoreBridge.SignatureStructOutput[];
    hash: string;
  };
}

export interface WormholeCoreBridgeInterface extends utils.Interface {
  contractName: 'WormholeCoreBridge';
  functions: {
    'parseAndVerifyVM(bytes)': FunctionFragment;
    'publishMessage(uint32,bytes,uint8)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'parseAndVerifyVM',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'publishMessage',
    values: [BigNumberish, BytesLike, BigNumberish],
  ): string;

  decodeFunctionResult(
    functionFragment: 'parseAndVerifyVM',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'publishMessage',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface WormholeCoreBridge extends BaseContract {
  contractName: 'WormholeCoreBridge';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WormholeCoreBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    parseAndVerifyVM(
      encodedVM: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [WormholeCoreBridge.VMStructOutput, boolean, string] & {
        vm: WormholeCoreBridge.VMStructOutput;
        valid: boolean;
        reason: string;
      }
    >;

    publishMessage(
      nonce: BigNumberish,
      payload: BytesLike,
      consistencyLevel: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  parseAndVerifyVM(
    encodedVM: BytesLike,
    overrides?: CallOverrides,
  ): Promise<
    [WormholeCoreBridge.VMStructOutput, boolean, string] & {
      vm: WormholeCoreBridge.VMStructOutput;
      valid: boolean;
      reason: string;
    }
  >;

  publishMessage(
    nonce: BigNumberish,
    payload: BytesLike,
    consistencyLevel: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    parseAndVerifyVM(
      encodedVM: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [WormholeCoreBridge.VMStructOutput, boolean, string] & {
        vm: WormholeCoreBridge.VMStructOutput;
        valid: boolean;
        reason: string;
      }
    >;

    publishMessage(
      nonce: BigNumberish,
      payload: BytesLike,
      consistencyLevel: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    parseAndVerifyVM(
      encodedVM: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    publishMessage(
      nonce: BigNumberish,
      payload: BytesLike,
      consistencyLevel: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    parseAndVerifyVM(
      encodedVM: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    publishMessage(
      nonce: BigNumberish,
      payload: BytesLike,
      consistencyLevel: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
